from instal.firstprinciples.TestEngine import InstalSingleShotTestRunner, InstalTestCase
from instal.instalexceptions import InstalParserError


class GenerateNormsEvents(InstalTestCase):

    def test_generate_institutional(self):
        runner = InstalSingleShotTestRunner(input_files=["generates/generate_institutional.ial"], bridge_file=None,
                                            domain_files=[
                                                "generates/blank.idc"],
                                            fact_files=["generates/perm-exlhs.iaf", "generates/perm-inrhs.iaf",
                                                        "generates/pow-inrhs.iaf"])

        condition = [
            {"occurred": ["occurred(ex_lhs, generate)", "occurred(in_rhs, generate)"],
             "notoccurred": ["occurred(viol(ex_lhs),generate)", "occurred(viol(in_rhs),generate)"]}
        ]

        self.assertEqual(runner.run_test(query_file="generates/generates-exlhs.iaq",
                                         verbose=self.verbose,
                                         conditions=condition), 0, "Inst event generated by exogenous")

    def test_generate_violation(self):
        # This fails because violation events check for powers right now and they shouldn't.
        # % Translation of ex_lhs generates vi_rhs if [] in
        # occurred(vi_rhs,generate,I) :- occurred(ex_lhs,generate,I),
        # holdsat(pow(vi_rhs),generate,I),
        # inst(generate), instant(I).

        runner = InstalSingleShotTestRunner(input_files=["generates/generate_violation.ial"], bridge_file=None,
                                            domain_files=[
                                                "generates/blank.idc"],
                                            fact_files=["generates/perm-exlhs.iaf"])

        condition = [
            {"occurred": ["occurred(ex_lhs, generate)", "occurred(vi_rhs, generate)"],
             "notoccurred": ["occurred(viol(ex_lhs),generate)", "occurred(viol(vi_rhs),generate)"]}
        ]

        self.assertEqual(runner.run_test(query_file="generates/generates-exlhs.iaq",
                                         verbose=self.verbose,
                                         conditions=condition), 0, "Violation event generated by exogenous")

    def test_generate_exogenous(self):
        runner = InstalSingleShotTestRunner(input_files=["generates/generate_exogenous.ial"],
                                            domain_files=["generates/blank.idc"])

        with self.assertRaises(InstalParserError):
            runner.run_test(
                query_file="generates/generates-exlhs.iaq", verbose=self.verbose)

    def test_generate_using_institutional(self):
        runner = InstalSingleShotTestRunner(input_files=["generates/generate_inst_institutional.ial"], bridge_file=None,
                                            domain_files=[
                                                "generates/blank.idc"],
                                            fact_files=["generates/powperm-inst_institution.iaf"])

        condition = [
            {"occurred": ["occurred(ex_lhs, generate)", "occurred(in_lhs, generate)", "occurred(in_rhs,generate)"],
             "notoccurred": ["occurred(viol(ex_lhs),generate)", "occurred(viol(in_lhs),generate)",
                             "occurred(viol(in_rhs),generate)"]}
        ]

        self.assertEqual(runner.run_test(query_file="generates/generates-exlhs.iaq",
                                         verbose=self.verbose,
                                         conditions=condition), 0,
                         "Inst event generated by institutional (generated by exogeous)")

    def test_generate_using_violation(self):
        # see  test_generate_violation for explanation
        runner = InstalSingleShotTestRunner(input_files=["generates/generate_inst_violation.ial"], bridge_file=None,
                                            domain_files=[
                                                "generates/blank.idc"],
                                            fact_files=["generates/powperm-inst_institution.iaf"])

        condition = [
            {"occurred": ["occurred(ex_lhs, generate)", "occurred(vi_lhs, generate)", "occurred(in_rhs,generate)"],
             "notoccurred": ["occurred(viol(ex_lhs),generate)", "occurred(viol(vi_lhs),generate)",
                             "occurred(viol(in_rhs),generate)"]}]

        self.assertEqual(runner.run_test(query_file="generates/generates-exlhs.iaq",
                                         verbose=self.verbose,
                                         conditions=condition), 0,
                         "Inst event generated by violation evrnt (generated by exogeous)")

    def test_generate_using_exogenous(self):
        runner = InstalSingleShotTestRunner(input_files=["generates/generate_inst_exogenous.ial"],
                                            domain_files=["generates/blank.idc"])

        with self.assertRaises(InstalParserError):
            runner.run_test(
                query_file="generates/generates-exlhs.iaq", verbose=self.verbose)

    def test_generate_condition_true(self):
        runner = InstalSingleShotTestRunner(input_files=["generates/generate_condition.ial"], bridge_file=None,
                                            domain_files=[
                                                "generates/blank.idc"],
                                            fact_files=["generates/perm-exlhs.iaf", "generates/perm-inrhs.iaf",
                                                        "generates/pow-inrhs.iaf"])

        condition = [
            {"occurred": ["occurred(ex_lhs, generate)", "occurred(in_rhs, generate)"],
             "notoccurred": ["occurred(viol(ex_lhs),generate)", "occurred(viol(in_rhs),generate)"]}
        ]

        self.assertEqual(runner.run_test(query_file="generates/generates-exlhs.iaq",
                                         verbose=self.verbose,
                                         fact_files=[
                                             "generates/gen_cond.iaf"],
                                         conditions=condition), 0, "Inst event generated if condition is true")

    def test_generate_condition_false(self):
        runner = InstalSingleShotTestRunner(input_files=["generates/generate_condition.ial"], bridge_file=None,
                                            domain_files=[
                                                "generates/blank.idc"],
                                            fact_files=["generates/perm-exlhs.iaf", "generates/perm-inrhs.iaf",
                                                        "generates/pow-inrhs.iaf"])

        condition = [
            {"occurred": ["occurred(ex_lhs, generate)"],
             "notoccurred": ["occurred(viol(ex_lhs),generate)", "occurred(viol(in_rhs),generate)",
                             "occurred(in_rhs, generate)"]}
        ]

        self.assertEqual(runner.run_test(query_file="generates/generates-exlhs.iaq",
                                         verbose=self.verbose,
                                         conditions=condition), 0, "Inst event not generated if condition is false")
