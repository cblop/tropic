% TYPES ----------
type Agent;
type Role;
type Trope;
type Phase;
type Place;
type Quest;
type Object;

% FLUENTS ----------
fluent role(Agent, Role);
fluent phase(Trope, Phase);
fluent at(Agent, Place);

% EXTERNAL EVENTS: The Hero's Journey ----------
external event meet(Agent, Agent);
external event go(Agent, Place);
% CREATION EVENT -----------
create event startShow;

% INST EVENTS: The Hero's Journey ----------
inst event intHerosJourney(Agent, Agent, Place);
% INITIATES: The Hero's Journey ----------
intHerosJourney(R, S, T) initiates phase(herosJourney, phaseA), perm(go(R, T)) if phase(herosJourney, inactive), role(R, hero), place(T, home);
intHerosJourney(R, S, T) initiates phase(herosJourney, phaseB), perm(meet(S, R)) if phase(herosJourney, phaseA), role(S, dispatcher), role(R, hero);
intHerosJourney(R, S, T) initiates phase(herosJourney, phaseC), perm(go(R, T)) if phase(herosJourney, phaseB), role(R, hero), place(T, home);
intHerosJourney(R, S, T) initiates phase(herosJourney, phaseD), perm(go(R, T)) if phase(herosJourney, phaseC), role(R, hero), place(T, home);
intHerosJourney(R, S, T) initiates phase(herosJourney, done) if phase(herosJourney, phaseD);
% TERMINATES: The Hero's Journey ----------
intHerosJourney(R, S, T) terminates phase(herosJourney, inactive) if phase(herosJourney, phaseA), perm(go(R, T));
intHerosJourney(R, S, T) terminates phase(herosJourney, phaseA), perm(go(R, T)) if phase(herosJourney, phaseB), perm(meet(S, R));
intHerosJourney(R, S, T) terminates phase(herosJourney, phaseB), perm(meet(S, R)) if phase(herosJourney, phaseC), perm(go(R, T));
intHerosJourney(R, S, T) terminates phase(herosJourney, phaseC), perm(go(R, T)) if phase(herosJourney, phaseD), perm(go(R, T));
intHerosJourney(R, S, T) terminates phase(herosJourney, phaseD), perm(go(R, T)) if phase(herosJourney, done);
% GENERATES: The Hero's Journey ----------
go(R, T) generates intHerosJourney(R, S, T) if role(R, hero), place(T, home);
meet(S, R) generates intHerosJourney(R, S, T) if role(S, dispatcher), role(R, hero);